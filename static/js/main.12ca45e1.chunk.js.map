{"version":3,"sources":["components/Box/Box.jsx","utils/common.js","components/Draw/SelectColour.jsx","utils/fontInterface.js","components/Text/TextInput.jsx","utils/convertToBash.js","utils/wallUtils.js","components/GitWall/WallBox.jsx","components/GitWall/Wall.jsx","components/Header/Header.jsx","components/App.jsx","index.jsx"],"names":["Box","props","className","title","children","classNameFromVal","value","SelectColour","setDrawValue","drawValue","map","colour","key","type","name","onClick","checked","readOnly","sinclair","require","checkCharExists","character","hasOwnProperty","TextInput","state","text","updateInputValue","bind","random","temp","Math","floor","length","this","setState","setGitWall","event","target","checkedValue","index","textWall","stringArray","currentSinclairFont","outerArrayIndex","push","innerArrayIndex","getTextArray","updateWall","onChange","PureComponent","INSTRUCTIONS","README_TEMPLATE","getStartDate","startDate","Date","setUTCFullYear","getUTCFullYear","setUTCHours","setUTCMinutes","setUTCSeconds","weekDay","getUTCDay","setUTCDate","getUTCDate","commit","date","commits","commitDate","valueOf","dayCommitInstructions","i","toISOString","getUTCMinutes","generateBash","imageArray","multiplier","min","x","commitInstructions","week","day","daysCommits","join","setDate","getDate","blankWall","wall","start","moment","dayDiff","diff","overlayWall","baseWall","topWall","yLength","y","xLength","max","mixWalls","topWalls","WallBox","hasMouseDown","updateDrawWall","tooltip","onMouseMove","e","onMouseEnter","onMouseUp","Wall","export","reset","saveScript","allWall","round","blob","Blob","saveAs","boxDate","subtract","onMouseDown","onMouseLeave","wallRow","add","weekDate","format","id","htmlFor","React","Component","Header","href","aria-label","width","height","viewBox","aria-hidden","d","fill","description","App","drawWall","_setDrawValue","_updateDrawWall","_updateTextWall","_updateAllWall","_clearAllWall","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12ca45e1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Box.css\";\n\nconst Box = props => {\n  const className = props.className ? props.className : \"section\";\n  return (\n    <section className={className}>\n      <h3>{props.title}</h3>\n      {props.children}\n    </section>\n  );\n};\n\nexport default Box;\n","/**\n * Retrieves the colour class name from the draw value\n * @param {int} value \n */\nexport function classNameFromVal(value) {\n  let className = \"wall\";\n  switch (value) {\n    case 1:\n      className += \" wall-lighter-green\";\n      break;\n    case 2:\n      className += \" wall-light-green\";\n      break;\n    case 3:\n      className += \" wall-dark-green\";\n      break;\n    case 4:\n      className += \" wall-darker-green\";\n      break;\n    default:\n      className += \" wall-grey\";\n      break;\n  }\n  return className;\n}","import React from \"react\";\nimport Box from \"../Box/Box\";\nimport { classNameFromVal } from \"../../utils/common\";\nimport \"./SelectColour.css\";\n\nexport default function SelectColour({ setDrawValue, drawValue }) {\n  const colours = [0, 1, 2, 3, 4];\n  return (\n    <Box title=\"Choose a brush colour\">\n      <div className=\"draw\">\n        {colours.map(colour => (\n          <label key={classNameFromVal(colour)} className=\"radio\">\n            <input\n              type=\"radio\"\n              name=\"answer\"\n              onClick={() => setDrawValue(colour)}\n              checked={drawValue === colour}\n              readOnly\n            />\n            <div className={`${classNameFromVal(colour)} wall-special`} />\n          </label>\n        ))}\n      </div>\n    </Box>\n  );\n}\n","const { sinclair } = require(\"../assets/font.json\");\n/* \nThe Sinclair Spectrum font, originally retrieved from:\nhttps://github.com/pikesley/nineteen-eighty-two/blob/6057f8e478a560b9fd1005530354a87401b30ebe/config/characters.yml\nand then converted to 7X7 2D array format for our purposes.\n*/\n\n/**\n * Returns a boolean indicating whether the character is in the font\n * @param {String} character \n */\nexport function checkCharExists(character) {\n  return sinclair.hasOwnProperty(character);\n}\n\n/**\n * Returns the 2D array representation of the character if it exists in the font, or false otherwise\n * @param {String} character \n */\nexport function getCharacterArray(character) {\n  return checkCharExists(character) ? sinclair[character] : false;\n}\n\n/**\n * Returns the 2D array representation of the string passed in, encoded as the drawValue\n * @param {String} text \n * @param {Number} drawValue\n */\nexport function getTextArray(text, drawValue) {\n  var stringArray = [];\n  for (var index = 0; index < text.length; index++) {\n    var currentSinclairFont = getCharacterArray(text[index]);\n    if (currentSinclairFont) {\n      for (\n        var outerArrayIndex = 0;\n        outerArrayIndex < currentSinclairFont.length;\n        outerArrayIndex++\n      ) {\n        stringArray.push([]);\n        for (\n          var innerArrayIndex = 0;\n          innerArrayIndex < currentSinclairFont[outerArrayIndex].length;\n          innerArrayIndex++\n        ) {\n          stringArray[outerArrayIndex].push(\n            currentSinclairFont[outerArrayIndex][innerArrayIndex] * drawValue\n          );\n        }\n      }\n    }\n  }\n\n  return stringArray;\n}\n","import React, { PureComponent } from \"react\";\nimport { checkCharExists, getTextArray } from \"../../utils/fontInterface\";\nimport \"./TextInput.css\";\nimport Box from \"../Box/Box\";\n\nexport default class TextInput extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\"\n    };\n    this.updateInputValue = this.updateInputValue.bind(this);\n  }\n\n  componentDidMount() {\n    const random = [\n      \" hello\",\n      \"welcome\",\n      \"!!!!!!!!\",\n      \"$$$$$$$$\",\n      \"hire me\",\n      \"++++++++\",\n      \"********\",\n      \"01234567\",\n      \"qwerty\",\n      \"commits\",\n      \"howdy\",\n      \"3.141592\",\n      \"#trendy\"\n    ];\n    const temp = random[Math.floor(Math.random() * random.length)];\n    this.setState({\n      text: temp\n    });\n    this.setGitWall(temp);\n  }\n\n  updateInputValue(event) {\n    const {\n      target: { value }\n    } = event;\n\n    let checkedValue = \"\"; //This section removes any characters which are not in the font\n    for (let index in value) {\n      if (checkCharExists(value[index])) {\n        checkedValue += value[index];\n      }\n    }\n    this.setState({\n      text: checkedValue\n    });\n    this.setGitWall(checkedValue);\n  }\n\n  setGitWall(text) {\n    let textWall = getTextArray(text, this.props.drawValue);\n    this.props.updateWall(textWall);\n  }\n\n  render() {\n    return (\n      <Box title=\"Enter text\">\n        <input\n          className=\"text\"\n          type=\"text\"\n          value={this.state.text}\n          onChange={this.updateInputValue}\n        />\n      </Box>\n    );\n  }\n}\n","const INSTRUCTIONS = `Upload your creation to GitHub!\\n\n1. Create a new empty repo on your GitHub account\\n\n2. Upload your repository using the instructions on https://github.com/new, or this script!`;\nconst README_TEMPLATE = `# My Github Art\\n\nCreated using [git-art](https://github.com/jamesjarvis/git-art)`;\n\n/**\n * Returns the start date - so the first sunday 1 year ago.\n */\nexport function getStartDate() {\n  let startDate = new Date();\n  startDate.setUTCFullYear(startDate.getUTCFullYear() - 1);\n  startDate.setUTCHours(12);\n  startDate.setUTCMinutes(0);\n  startDate.setUTCSeconds(0);\n  let weekDay = startDate.getUTCDay();\n\n  while (weekDay !== 0) {\n    startDate.setUTCDate(startDate.getUTCDate() - 1);\n    weekDay = startDate.getUTCDay();\n  }\n\n  return startDate;\n}\n\n/**\n * Returns a string of commit information for that day, based on the number of commits requested.\n * @param {Date} date\n * @param {Number} commits\n */\nfunction commit(date, commits) {\n  let commitDate = new Date(date.valueOf());\n  let dayCommitInstructions = [];\n  for (let i = 0; i < commits; i++) {\n    dayCommitInstructions.push(\n      `GIT_AUTHOR_DATE=${commitDate.toISOString()} GIT_COMMITTER_DATE=${commitDate.toISOString()} git commit --allow-empty -a -m \"git-art\" > /dev/null`\n    );\n    commitDate.setUTCMinutes(commitDate.getUTCMinutes() + 1);\n  }\n  return dayCommitInstructions;\n}\n\n/**\n * This function should convert the supplied 2d array from the parameter into a bash script which can be run by the user.\n * @param {Array<Array<int>>} imageArray\n * @param {int} multiplier\n */\nexport function generateBash(imageArray, multiplier = 1) {\n  let startDate = getStartDate();\n  const length = Math.min(...imageArray.map(x => x.length));\n  let commitInstructions = [];\n\n  for (let week = 0; week < length; week++) {\n    for (let day = 0; day < imageArray.length; day++) {\n      const daysCommits = commit(startDate, imageArray[day][week] * multiplier);\n      if (daysCommits.length > 0) {\n        commitInstructions.push(daysCommits.join(\"\\n\"));\n      }\n      startDate.setDate(startDate.getDate() + 1);\n    }\n  }\n\n  let bashScript = `#!/usr/bin/env bash\n  REPO=artistic\n  UPLOAD_INSTRUCTIONS=\"${INSTRUCTIONS}\"\n  git init $REPO\n  cd $REPO\n  touch README.md\n  echo \"${README_TEMPLATE}\" >> README.md\n  git add README.md\n  touch git-art\n  git add git-art\n  gitCommits() {\n    ${commitInstructions.join(\"\\n\")}\n  }\n  spinner() {\n    printf \"$0: Committing your art...   \"\n    while true; do\n      printf \"\\\\b/\"\n      sleep 0.1\n      printf \"\\\\b-\"\n      sleep 0.1\n      printf \"\\\\b\\\\\\\\\"\n      sleep 0.1\n      printf \"\\\\b|\"\n      sleep 0.1\n    done\n  }\n  spinner &\n  SPIN=$!\n  gitCommits\n  kill $SPIN >/dev/null 2>&1\n  echo \"  ...completed git commits\"\n  echo \"**************************\"\n  echo $UPLOAD_INSTRUCTIONS\n  echo \"**************************\"\n  read -r -p \"Would you like to upload now? [Y/n] > \" input\n  case $input in\n  [yY][eE][sS] | [yY])\n    echo \"Firstly, make sure you have created a new repository at: https://github.com/new\"\n    echo \"Then...\"\n    read -r -p \"Enter your GitHub username > \" username\n    read -r -p \"Enter your repositary name > \" repository\n    git remote add origin https://github.com/$username/$repository.git\n    git push -u origin master\n    echo \"Done! Check out your creation at https://github.com/$username\"\n    ;;\n  [nN][oO] | [nN])\n    echo \"See ya later, alligator.\"\n    ;;\n  *)\n    echo \"Invalid input.\"\n    exit 1\n    ;;\n  esac`;\n\n  return bashScript;\n}\n","import moment from \"moment\";\nimport { getStartDate } from \"./convertToBash\";\n\n/**\n * Generates a blank year long wall template\n */\nexport function blankWall() {\n  const val = 0;\n  let wall = [[], [], [], [], [], [], []];\n  let start = moment(getStartDate());\n  let today = moment();\n  const dayDiff = today.diff(start, \"days\");\n  //fill in the 2D array\n  let weekDay = 0;\n  for (let i = 0; i <= dayDiff; i++) {\n    wall[weekDay].push(val);\n    weekDay = weekDay === 6 ? 0 : weekDay + 1; //updated the week day\n  }\n  return wall;\n}\n\n/**\n * Updates the cell at the specified position in the wall with the specified value\n * @param {int} x \n * @param {int} y \n * @param {int} drawValue \n * @param {Array<Array<int>>} wall \n */\nexport function updateWall(x, y, drawValue, wall) {\n  if (wall[y] === undefined) {\n    return wall;\n  }\n  if (wall[y][x] === undefined) {\n    return wall;\n  }\n  wall[y][x] = drawValue;\n  return wall;\n}\n\n/**\n * Mixes the values of the two walls, so the strongest values are over the top\n * @param {Array<Array<int>>} baseWall \n * @param {Array<Array<int>>} topWall \n */\nexport function overlayWall(baseWall, topWall) {\n  const yLength = Math.min(baseWall.length, topWall.length);\n  for (let y = 0; y < yLength; y++) {\n    const xLength = Math.min(baseWall[y].length, topWall[y].length);\n    for (let x = 0; x < xLength; x++) {\n      baseWall[y][x] = Math.max(baseWall[y][x], topWall[y][x]);\n    }\n  }\n  return baseWall;\n}\n\n/**\n * Mixes the values of multiple walls into the main wall\n * @param {Array<Array<int>>} baseWall \n * @param {Array<Array<int>>} topWalls \n */\nexport function mixWalls(baseWall, topWalls) {\n  for(let wall in topWalls){\n    baseWall = overlayWall(baseWall, topWalls[wall]);\n  }\n  return baseWall;\n}\n","import React from \"react\";\nimport \"./WallBox.css\";\nimport { classNameFromVal } from \"../../utils/common\";\n\nexport default function WallBox({value, date, hasMouseDown, x, y, drawValue, updateDrawWall}) {\n  return (\n    <div\n      className={classNameFromVal(value)}\n      tooltip={`Contributions on ${date}`}\n      onMouseMove={e => {\n        if (hasMouseDown) {\n          updateDrawWall(\n            x,\n            y,\n            drawValue\n          );\n        }\n      }}\n      onMouseEnter={e => {\n        if (hasMouseDown) {\n          updateDrawWall(\n            x,\n            y,\n            drawValue\n          );\n        }\n      }}\n      onMouseUp={e => {\n        if (hasMouseDown) {\n          updateDrawWall(\n            x,\n            y,\n            drawValue\n          );\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport WallBox from \"./WallBox\";\nimport moment from \"moment\";\nimport \"./Wall.css\";\nimport { generateBash } from \"../../utils/convertToBash\";\nimport Box from \"../Box/Box\";\nimport { saveAs } from \"file-saver\";\n\nexport default class Wall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasMouseDown: false,\n      export: \"\",\n      value: 4\n    };\n    this.export = this.export.bind(this);\n    this.reset = this.reset.bind(this);\n    this.updateInputValue = this.updateInputValue.bind(this);\n    this.saveScript = this.saveScript.bind(this);\n  }\n\n  updateInputValue(event) {\n    const {\n      target: { value }\n    } = event;\n\n    this.setState({\n      value: Math.min(value, 50)\n    });\n  }\n\n  reset() {\n    this.setState({\n      export: \"\"\n    });\n    this.props.reset();\n  }\n\n  export() {\n    this.setState({\n      export: generateBash(\n        this.props.allWall,\n        Math.max(Math.round(this.state.value / 4), 1)\n      )\n    });\n  }\n\n  saveScript() {\n    let blob = new Blob([this.state.export], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, \"git-art.sh\");\n  }\n\n  render() {\n    let boxDate = moment(this.props.startDate);\n    boxDate.subtract(1, \"days\");\n    return (\n      <Box title=\"Your new wall\" className=\"box\">\n        <div\n          className=\"box\"\n          onMouseDown={() => {\n            this.setState({ hasMouseDown: true });\n          }}\n          onMouseUp={() => this.setState({ hasMouseDown: false })}\n          onMouseLeave={() => {\n            if (this.state.hasMouseDown) {\n              this.setState({ hasMouseDown: false });\n            }\n          }}\n        >\n          {this.props.allWall.map((wallRow, y) => {\n            boxDate.add(1, \"days\");\n            let weekDate = moment(boxDate);\n            weekDate.subtract(1, \"weeks\");\n            return (\n              <div key={`${y}-rowHeader`} className=\"columncontainer\">\n                {wallRow.map((value, x) => {\n                  weekDate.add(1, \"weeks\");\n                  return (\n                    <WallBox\n                      key={`${x}-${y}-col`}\n                      date={weekDate.format(\"MMM D, YYYY\")}\n                      x={x}\n                      y={y}\n                      value={value}\n                      drawValue={this.props.drawValue}\n                      updateDrawWall={this.props.updateDrawWall}\n                      hasMouseDown={this.state.hasMouseDown}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n          <span className=\"options\">\n            <button id=\"reset\" className=\"danger\" onClick={this.reset}>\n              RESET\n            </button>\n            <button id=\"export\" className=\"ok\" onClick={this.export}>\n              EXPORT\n            </button>\n            <label htmlFor=\"valueInput\">Max commits in one day:</label>\n            <input\n              type=\"number\"\n              name=\"quantity\"\n              min=\"1\"\n              max=\"50\"\n              id=\"valueInput\"\n              value={this.state.value}\n              onChange={this.updateInputValue}\n            />\n          </span>\n          {this.state.export && (\n            <pre>\n              <button id=\"save\" className=\"good\" onClick={this.saveScript}>\n                Save script\n              </button>\n              <code>{this.state.export}</code>\n            </pre>\n          )}\n        </div>\n      </Box>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n  <header>\n    <a\n      href=\"https://github.com/jamesjarvis/git-art\"\n      className=\"github-corner\"\n      aria-label=\"View source on GitHub\"\n    >\n      <svg\n        width=\"80\"\n        height=\"80\"\n        viewBox=\"0 0 250 250\"\n        id=\"github\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n        <path\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n          fill=\"currentColor\"\n          className=\"octo-arm\"\n        />\n        <path\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n          fill=\"currentColor\"\n          className=\"octo-body\"\n        />\n      </svg>\n    </a>\n    {/* <style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style> */}\n    <div className=\"inner\">\n      <h1 className=\"title\">{props.title}</h1>\n      <h2 className=\"subtitle\">{props.description}</h2>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport SelectColour from \"./Draw/SelectColour\";\nimport TextInput from \"./Text/TextInput\";\nimport { getStartDate } from \"../utils/convertToBash\";\nimport { blankWall, updateWall, mixWalls } from \"../utils/wallUtils\";\nimport moment from \"moment\";\nimport Wall from \"../components/GitWall/Wall\";\nimport Header from \"../components/Header/Header\";\nimport \"./App.css\";\nimport Box from \"./Box/Box\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textWall: [],\n      drawWall: blankWall(),\n      allWall: blankWall(),\n      drawValue: 1\n    };\n    this._setDrawValue = this._setDrawValue.bind(this);\n\n    this._updateDrawWall = this._updateDrawWall.bind(this);\n    this._updateTextWall = this._updateTextWall.bind(this);\n    this._updateAllWall = this._updateAllWall.bind(this);\n\n    this._clearAllWall = this._clearAllWall.bind(this);\n  }\n\n  _updateDrawWall(x, y, drawValue) {\n    const drawWall = updateWall(x, y, drawValue, this.state.drawWall);\n    const allWall = mixWalls(blankWall(), [this.state.textWall, drawWall]);\n    this.setState({\n      drawWall,\n      allWall\n    });\n  }\n  _updateTextWall(textWall) {\n    const allWall = mixWalls(blankWall(), [this.state.drawWall, textWall]);\n    this.setState({\n      textWall,\n      allWall: allWall\n    });\n  }\n  _updateAllWall() {\n    const allWall = mixWalls(blankWall(), [\n      this.state.textWall,\n      this.state.drawWall\n    ]);\n    this.setState({\n      allWall\n    });\n  }\n\n  _clearAllWall() {\n    this.setState({\n      textWall: [],\n      drawWall: blankWall(),\n      allWall: blankWall()\n    });\n  }\n\n  _setDrawValue(value) {\n    this.setState({\n      drawValue: value\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Header title=\"Git Art\" description=\"Make your GitHub pretty\" />\n        <main>\n          <Box title=\"General info\">\n            <p>\n              Decorate/Vandalise your GitHub activity board! Choose your brush\n              colour, and either draw with your mouse, or type in text. When\n              ready, export and run the bash script.\n            </p>\n          </Box>\n          <TextInput\n            updateWall={this._updateTextWall}\n            drawValue={this.state.drawValue}\n          />\n          <SelectColour\n            setDrawValue={this._setDrawValue}\n            drawValue={this.state.drawValue}\n          />\n          <Wall\n            allWall={this.state.allWall}\n            startDate={moment(getStartDate())}\n            drawValue={this.state.drawValue}\n            updateDrawWall={this._updateDrawWall}\n            reset={this._clearAllWall}\n          />\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}